name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is needed to create a GitHub release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RELEASE_VERSION == ''
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            archive-name: psoc-linux.tar.gz
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            archive-name: psoc-macos.tar.gz
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            archive-name: psoc-windows.zip

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev imagemagick inkscape

      - name: Install system dependencies (macOS)
        if: matrix.build == 'macos'
        run: |
          brew install imagemagick inkscape

      - name: Install packaging tools (Windows)
        if: matrix.build == 'windows'
        run: |
          cargo install cargo-wix

      - name: Generate application icons
        run: |
          chmod +x scripts/generate_icons.sh
          scripts/generate_icons.sh

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/psoc"

      - name: Create packages
        run: |
          chmod +x scripts/package.sh
          if [ "${{ matrix.build }}" = "linux" ]; then
            scripts/package/linux.sh ${{ needs.create-release.outputs.release_version }} release true ${{ matrix.target }}
          elif [ "${{ matrix.build }}" = "macos" ]; then
            scripts/package/macos.sh ${{ needs.create-release.outputs.release_version }} release true ${{ matrix.target }}
          elif [ "${{ matrix.build }}" = "windows" ]; then
            pwsh scripts/package/windows.ps1 -Version ${{ needs.create-release.outputs.release_version }} -Configuration release -SkipBuild:$true
          fi

      - name: Build archive (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: |
          staging="psoc-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
          mkdir -p "$staging"
          cp "target/${{ matrix.target }}/release/psoc" "$staging/"
          cp README.md LICENSE-MIT LICENSE-APACHE "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

      - name: Build archive (windows)
        if: matrix.build == 'windows'
        shell: bash
        run: |
          staging="psoc-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
          mkdir -p "$staging"
          cp "target/${{ matrix.target }}/release/psoc.exe" "$staging/"
          cp README.md LICENSE-MIT LICENSE-APACHE "$staging/"
          cd "$staging"
          7z a "../$staging.zip" .
          cd ..
          echo "ASSET=$staging.zip" >> $GITHUB_ENV

      - name: Upload packages
        run: |
          # Upload all generated packages
          for package in packages/${{ matrix.build }}/*; do
            if [ -f "$package" ]; then
              echo "Uploading $package"
              gh release upload ${{ needs.create-release.outputs.release_version }} "$package"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload legacy archive (for compatibility)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
